# Multi-Container Instance Configuration Example
# This file demonstrates how to configure two container instances with different use cases

# Resource Configuration
resource_group_name = "rg-my-containers"
location           = "East US"
restart_policy     = "Always"

# Container 1 Configuration - Web Server
container1_name                = "nginx-web-server"
container1_container_name      = "nginx"
container1_image              = "nginx:1.21-alpine"
container1_cpu                = 0.5
container1_memory             = 1.0
container1_port               = 80
container1_ip_address_type    = "Public"
container1_dns_name_label     = "my-nginx-app"
container1_os_type            = "Linux"

container1_environment_variables = {
  NGINX_HOST = "localhost"
  NGINX_PORT = "80"
}

container1_exposed_ports = [
  {
    port     = 80
    protocol = "TCP"
  }
]

# Container 2 Configuration - API Server
container2_name                = "nodejs-api-server"
container2_container_name      = "nodejs-api"
container2_image              = "node:18-alpine"
container2_cpu                = 1.0
container2_memory             = 2.0
container2_port               = 3000
container2_ip_address_type    = "Public"
container2_dns_name_label     = "my-nodejs-api"
container2_os_type            = "Linux"

container2_environment_variables = {
  NODE_ENV = "production"
  PORT     = "3000"
  API_VERSION = "v1"
}

container2_secure_environment_variables = {
  DATABASE_PASSWORD = "your-secure-password"
  JWT_SECRET       = "your-jwt-secret"
}

container2_exposed_ports = [
  {
    port     = 3000
    protocol = "TCP"
  }
]

# Enable monitoring and storage
enable_diagnostics      = true
log_retention_days     = 30
create_storage_account = true
storage_quota_gb       = 50

# Tags
tags = {
  Environment = "Production"
  Project     = "WebApp"
  Owner       = "DevOps Team"
  CostCenter  = "IT-001"
}
